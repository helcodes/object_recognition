{"remainingRequest":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\object_recognition\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\develop\\object_recognition\\src\\App.vue","mtime":1618560612252},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMnCi8vaW1wb3J0ICogYXMgY29jb1NzZCBmcm9tICdAdGVuc29yZmxvdy1tb2RlbHMvY29jby1zc2QnCmltcG9ydCAqIGFzIHRtSW1hZ2UgZnJvbSAnQHRlYWNoYWJsZW1hY2hpbmUvaW1hZ2UnLy90ZWFjaGFibGUgbWFjaGluZQovL2ltcG9ydCAqIGFzIHRtSW1hZ2UgZnJvbSAnQHRlbnNvcmZsb3ctbW9kZWxzL3NwZWVjaC1jb21tYW5kcycvL3RlYWNoYWJsZSBtYWNoaW5lCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQXBwJywKICBjb21wb25lbnRzOiB7CiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIHZpZGVvRGV2aWNlOiAnJywKICAgICAgcmVzdWx0V2lkdGg6IDAsCiAgICAgIHJlc3VsdEhlaWdodDogMCwKICAgICAgZGV2aWNlczogW10sCiAgICAgIGJhc2VNb2RlbDogJ21vYmlsZW5ldF92MicsCiAgICAgIGlzTW9kZWxSZWFkeTogZmFsc2UsCiAgICAgIHByZWRpY3Rpb25zOiBbXSwKICAgICAgc3ludGg6IHdpbmRvdy5zcGVlY2hTeW50aGVzaXMsCiAgICAgIGxhc3RQcmVkaWN0aW9uOiAnJwogICAgfQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICB0Zi5zZXRCYWNrZW5kKCd3ZWJnbCcpCiAgICB0aGlzLmxpc3RWaWRlb0RldmljZXMoKQogICAgLnRoZW4odmlkZW9EZXZpY2VzID0+IHsKICAgICAgICBmb3IgKGxldCBkZXZpY2Ugb2YgdmlkZW9EZXZpY2VzKSB7CiAgICAgICAgICAgIHRoaXMuZGV2aWNlcy5wdXNoKGRldmljZSkKICAgICAgICB9CiAgICAgICAgdGhpcy52aWRlb0RldmljZSA9IHZpZGVvRGV2aWNlc1swXS5kZXZpY2VJZAogICAgfSkKICAgIC50aGVuKCgpID0+IHsKICAgICAgICByZXR1cm4gdGhpcy5pbml0V2ViY2FtU3RyZWFtKCkKICAgIH0pCiAgICAudGhlbigoKSA9PiB7CiAgICAgIHJldHVybiB0aGlzLmxvYWRNb2RlbCgpCiAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICB0aGlzLmRldGVjdE9iamVjdHMoKQogICAgICB9KQogICAgfSkKICAgIAogIH0sCiAgbWV0aG9kczogewogICAgCiAgICBsb2FkTW9kZWwgKCkgewogICAgICAvL3JldHVybiBjb2NvU3NkLmxvYWQodGhpcy5iYXNlTW9kZWwpCiAgICAgIHJldHVybiB0bUltYWdlLmxvYWQoJy9tb2RlbC5qc29uJywnL21ldGFkYXRhLmpzb24nKS8vbG9hZCB0ZWFjaGFibGUgbWFjaGluZQogICAgICAvL3JldHVybiB0bUltYWdlLmxvYWQoJy9tb2RlbF9hdWRpby5qc29uJywnL21ldGFkYXRhX2F1ZGlvLmpzb24nKS8vbG9hZCB0ZWFjaGFibGUgbWFjaGluZQogICAgICAudGhlbihtb2RlbCA9PiB7CiAgICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWwKICAgICAgICAgIHRoaXMuaXNNb2RlbFJlYWR5ID0gdHJ1ZQogICAgICAgICAgY29uc29sZS5sb2coJ21vZGVsIGxvYWRlZCcpCiAgICAgIH0pCiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgdG8gbG9hZCB0aGUgbW9kZWwnLCBlcnJvcikKICAgICAgICAgIHRocm93IChlcnJvcikKICAgICAgfSkKICAgIH0sCgogICAgZGV0ZWN0T2JqZWN0cyAoKSB7CiAgICAgIGlmICghdGhpcy5pc01vZGVsUmVhZHkpIHJldHVybgoKICAgICAgaWYgKHRoaXMuaXNWaWRlb1N0cmVhbVJlYWR5KSB7CiAgICAgIC8vdGhpcy5tb2RlbC5kZXRlY3QodGhpcy4kcmVmcy52aWRlbykKICAgICAgdGhpcy5tb2RlbC5wcmVkaWN0KHRoaXMuJHJlZnMudmlkZW8pLy90ZWFjaGFibGUgbWFjaGluZQogICAgICAgICAgLnRoZW4ocHJlZGljdGlvbnMgPT4gewogICAgICAgICAgICAgIC8vdGhpcy5yZW5kZXJQcmVkaWN0aW9ucyhwcmVkaWN0aW9ucykKICAgICAgICAgICAgICB0aGlzLmhhbmRsZVByZWRpY3Rpb25zKHByZWRpY3Rpb25zKS8vdGVhY2hhYmxlIG1hY2hpbmUKICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgICAgIHRoaXMuZGV0ZWN0T2JqZWN0cygpCiAgICAgICAgICAgICAgfSkKICAgICAgICAgIH0pCiAgICAgIH0gZWxzZSB7CiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7CiAgICAgICAgICB0aGlzLmRldGVjdE9iamVjdHMoKQogICAgICB9KQogICAgICB9CiAgICB9LAoKICAgIHJlbmRlclByZWRpY3Rpb25zIChwcmVkaWN0aW9ucykgewogICAgICB0aGlzLnByZWRpY3Rpb25zLnNwbGljZSgwKQogICAgICBjb25zdCBjdHggPSB0aGlzLiRyZWZzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpCiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY3R4LmNhbnZhcy53aWR0aCwgY3R4LmNhbnZhcy5oZWlnaHQpCiAgICAgIHByZWRpY3Rpb25zLmZvckVhY2gocHJlZGljdGlvbiA9PiB7CiAgICAgICAgY3R4LmJlZ2luUGF0aCgpCiAgICAgICAgY3R4LnJlY3QoLi4ucHJlZGljdGlvbi5iYm94KQogICAgICAgIGN0eC5saW5lV2lkdGggPSAzCiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JlZCcKICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JlZCcKICAgICAgICBjdHguc3Ryb2tlKCkKICAgICAgICBjdHguc2hhZG93Q29sb3IgPSAnd2hpdGUnCiAgICAgICAgY3R4LnNoYWRvd0JsdXIgPSAxMAogICAgICAgIGN0eC5mb250ID0gJzI0cHggQXJpYWwgYm9sZCcKICAgICAgICBjdHguZmlsbFRleHQoCiAgICAgICAgICAgIGAkeyhwcmVkaWN0aW9uLnNjb3JlICogMTAwKS50b0ZpeGVkKDEpfSUgJHtwcmVkaWN0aW9uLmNsYXNzfWAsCiAgICAgICAgICAgIHByZWRpY3Rpb24uYmJveFswXSwKICAgICAgICAgICAgcHJlZGljdGlvbi5iYm94WzFdID4gMTAgPyBwcmVkaWN0aW9uLmJib3hbMV0gLSA1IDogMTAKICAgICAgICApCiAgICAgICAgdGhpcy5wcmVkaWN0aW9ucy5wdXNoKHsKICAgICAgICAgIG5hbWU6IHByZWRpY3Rpb24uY2xhc3MsCiAgICAgICAgICBzY29yZTogKHByZWRpY3Rpb24uc2NvcmUqMTAwKS50b0ZpeGVkKDEpCiAgICAgICAgfSkKICAgICAgfSkKICAgIH0sCgovKnRlYWNoYWJsZSBtYWNoaW5lKi8KICAgIGhhbmRsZVByZWRpY3Rpb25zIChwcmVkaWN0aW9ucykgewogICAgICB0aGlzLnByZWRpY3Rpb25zLnNwbGljZSgwKQogICAgICAKICAgICAgbGV0IG1heFByZWRpY3Rpb24KICAgICAgbGV0IG1heFByb2IgPSAwCiAgICAgIHByZWRpY3Rpb25zLmZvckVhY2gocHJlZGljdGlvbiA9PiB7CiAgICAgICAgICB0aGlzLnByZWRpY3Rpb25zLnB1c2goewogICAgICAgICAgICBuYW1lOiBwcmVkaWN0aW9uLmNsYXNzTmFtZSwKICAgICAgICAgICAgc2NvcmU6IChwcmVkaWN0aW9uLnByb2JhYmlsaXR5ICogMTAwKS50b0ZpeGVkKDEpCiAgICAgICAgICB9KQogICAgICAgICAgaWYgKHByZWRpY3Rpb24ucHJvYmFiaWxpdHkgPiBtYXhQcm9iKSB7CiAgICAgICAgICAgIG1heFByb2IgPSBwcmVkaWN0aW9uLnByb2JhYmlsaXR5CiAgICAgICAgICAgIG1heFByZWRpY3Rpb24gPSBwcmVkaWN0aW9uCiAgICAgICAgICB9CiAgICAgIH0pCiAgICAgIGlmICghIHRoaXMuc3ludGguc3BlYWtpbmcgJiYgdGhpcy5sYXN0UHJlZGljdGlvbiAhPSBtYXhQcmVkaWN0aW9uLmNsYXNzTmFtZSkgewogICAgICAgIHRoaXMuc3BlYWsobWF4UHJlZGljdGlvbi5jbGFzc05hbWUpCiAgICAgICAgdGhpcy5sYXN0UHJlZGljdGlvbiA9IG1heFByZWRpY3Rpb24uY2xhc3NOYW1lCiAgICAgIH0KICAgIH0sCgogICAgc3BlYWsgKHByZWRpY3Rpb24pIHsKICAgICAgY29uc3QgdXR0ZXJUaGlzID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZShwcmVkaWN0aW9uKTsKICAgICAgdGhpcy5zeW50aC5zcGVhayh1dHRlclRoaXMpCiAgICB9LAoKCgogICAgbGlzdFZpZGVvRGV2aWNlcyAoKSB7CiAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKQogICAgICAudGhlbihkZXZpY2VzID0+IHsKICAgICAgICAgIHJldHVybiBkZXZpY2VzLmZpbHRlcihkZXZpY2UgPT4gZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0JykKICAgICAgfSkKICAgIH0sCgogICAgaW5pdFdlYmNhbVN0cmVhbSAoKSB7CiAgICAgICAgdGhpcy5pc1ZpZGVvU3RyZWFtUmVhZHkgPSBmYWxzZQogICAgICAgIC8vIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIG1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgQVBJCiAgICAgICAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiYgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHsKICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoewogICAgICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdGhpcy52aWRlb0RldmljZSB9CiAgICAgICAgfSkKICAgICAgICAudGhlbihzdHJlYW0gPT4gewogICAgICAgICAgICAvLyBzZXQgPHZpZGVvPiBzb3VyY2UgYXMgdGhlIHdlYmNhbSBpbnB1dAogICAgICAgICAgICBsZXQgdmlkZW8gPSB0aGlzLiRyZWZzLnZpZGVvCiAgICAgICAgICAgIHZpZGVvLnNyY09iamVjdCA9IHN0cmVhbQoKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgIC8vIHdoZW4gdmlkZW8gaXMgbG9hZGVkCiAgICAgICAgICAgIHZpZGVvLm9ubG9hZGVkbWV0YWRhdGEgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHZpZGVvIHJhdGlvCiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUmF0aW8gPSB2aWRlby52aWRlb0hlaWdodCAvIHZpZGVvLnZpZGVvV2lkdGgKICAgICAgICAgICAgICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lciBvbiByZXNpemUgdG8gcmVzZXQgdGhlIDx2aWRlbz4gYW5kIDxjYW52YXM+IHNpemVzCiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zZXRSZXN1bHRTaXplKQogICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBpbml0aWFsIHNpemUKICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVzdWx0U2l6ZSgpCiAgICAgICAgICAgICAgICB0aGlzLmlzVmlkZW9TdHJlYW1SZWFkeSA9IHRydWUKICAgICAgICAgICAgICAgIHJlc29sdmUoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgICAvLyBlcnJvciBoYW5kbGluZwogICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgdG8gaW5pdGlhbGl6ZSB3ZWJjYW0gc3RyZWFtJywgZXJyb3IpCiAgICAgICAgfSkKICAgICAgICB9CiAgICB9LAoKICAgIHNldFJlc3VsdFNpemUgKCkgewogICAgICAgIGxldCBjbGllbnRXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aAogICAgICAgIHRoaXMucmVzdWx0V2lkdGggPSBNYXRoLm1pbig2MDAsIGNsaWVudFdpZHRoKQogICAgICAgIHRoaXMucmVzdWx0SGVpZ2h0ID0gdGhpcy5yZXN1bHRXaWR0aCAqIHRoaXMudmlkZW9SYXRpbwogICAgICAgIGxldCB2aWRlbyA9IHRoaXMuJHJlZnMudmlkZW8KICAgICAgICB2aWRlby53aWR0aCA9IHRoaXMucmVzdWx0V2lkdGgKICAgICAgICB2aWRlby5oZWlnaHQgPSB0aGlzLnJlc3VsdEhlaWdodAogICAgfQogIH0KfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n  <div id=\"center-container\">\n    <select id=\"camera-select\" v-model=\"videoDevice\" @change=\"initWebcamStream()\">\n        <option v-for=\"device in devices\" v-bind:key=\"device.deviceId\" v-bind:value=\"device.deviceId\">\n            {{ device.label }}\n        </option>\n    </select>\n    <div id=\"result-frame\">\n      <video ref=\"video\" autoplay></video>\n      <canvas ref=\"canvas\" :width=\"resultWidth\" :height=\"resultHeight\"></canvas>\n    </div>\n    <ul>\n    <li v-for=\"(prediction, index) in predictions\" v-bind:key=\"index\">\n      {{prediction.name}}, {{prediction.score}} %\n    </li>\n    </ul>\n  </div>\n</div>\n</template>\n\n<script>\nimport * as tf from '@tensorflow/tfjs'\n//import * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport * as tmImage from '@teachablemachine/image'//teachable machine\n//import * as tmImage from '@tensorflow-models/speech-commands'//teachable machine\nexport default {\n  name: 'App',\n  components: {\n  },\n  data () {\n    return {\n      videoDevice: '',\n      resultWidth: 0,\n      resultHeight: 0,\n      devices: [],\n      baseModel: 'mobilenet_v2',\n      isModelReady: false,\n      predictions: [],\n      synth: window.speechSynthesis,\n      lastPrediction: ''\n    }\n  },\n  mounted () {\n    tf.setBackend('webgl')\n    this.listVideoDevices()\n    .then(videoDevices => {\n        for (let device of videoDevices) {\n            this.devices.push(device)\n        }\n        this.videoDevice = videoDevices[0].deviceId\n    })\n    .then(() => {\n        return this.initWebcamStream()\n    })\n    .then(() => {\n      return this.loadModel()\n      .then(() => {\n        this.detectObjects()\n      })\n    })\n    \n  },\n  methods: {\n    \n    loadModel () {\n      //return cocoSsd.load(this.baseModel)\n      return tmImage.load('/model.json','/metadata.json')//load teachable machine\n      //return tmImage.load('/model_audio.json','/metadata_audio.json')//load teachable machine\n      .then(model => {\n          this.model = model\n          this.isModelReady = true\n          console.log('model loaded')\n      })\n      .catch((error) => {\n          console.log('failed to load the model', error)\n          throw (error)\n      })\n    },\n\n    detectObjects () {\n      if (!this.isModelReady) return\n\n      if (this.isVideoStreamReady) {\n      //this.model.detect(this.$refs.video)\n      this.model.predict(this.$refs.video)//teachable machine\n          .then(predictions => {\n              //this.renderPredictions(predictions)\n              this.handlePredictions(predictions)//teachable machine\n              requestAnimationFrame(() => {\n              this.detectObjects()\n              })\n          })\n      } else {\n      requestAnimationFrame(() => {\n          this.detectObjects()\n      })\n      }\n    },\n\n    renderPredictions (predictions) {\n      this.predictions.splice(0)\n      const ctx = this.$refs.canvas.getContext('2d')\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      predictions.forEach(prediction => {\n        ctx.beginPath()\n        ctx.rect(...prediction.bbox)\n        ctx.lineWidth = 3\n        ctx.strokeStyle = 'red'\n        ctx.fillStyle = 'red'\n        ctx.stroke()\n        ctx.shadowColor = 'white'\n        ctx.shadowBlur = 10\n        ctx.font = '24px Arial bold'\n        ctx.fillText(\n            `${(prediction.score * 100).toFixed(1)}% ${prediction.class}`,\n            prediction.bbox[0],\n            prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10\n        )\n        this.predictions.push({\n          name: prediction.class,\n          score: (prediction.score*100).toFixed(1)\n        })\n      })\n    },\n\n/*teachable machine*/\n    handlePredictions (predictions) {\n      this.predictions.splice(0)\n      \n      let maxPrediction\n      let maxProb = 0\n      predictions.forEach(prediction => {\n          this.predictions.push({\n            name: prediction.className,\n            score: (prediction.probability * 100).toFixed(1)\n          })\n          if (prediction.probability > maxProb) {\n            maxProb = prediction.probability\n            maxPrediction = prediction\n          }\n      })\n      if (! this.synth.speaking && this.lastPrediction != maxPrediction.className) {\n        this.speak(maxPrediction.className)\n        this.lastPrediction = maxPrediction.className\n      }\n    },\n\n    speak (prediction) {\n      const utterThis = new SpeechSynthesisUtterance(prediction);\n      this.synth.speak(utterThis)\n    },\n\n\n\n    listVideoDevices () {\n      return navigator.mediaDevices.enumerateDevices()\n      .then(devices => {\n          return devices.filter(device => device.kind === 'videoinput')\n      })\n    },\n\n    initWebcamStream () {\n        this.isVideoStreamReady = false\n        // if the browser supports mediaDevices.getUserMedia API\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        return navigator.mediaDevices.getUserMedia({\n            video: { deviceId: this.videoDevice }\n        })\n        .then(stream => {\n            // set <video> source as the webcam input\n            let video = this.$refs.video\n            video.srcObject = stream\n\n            return new Promise((resolve) => {\n            // when video is loaded\n            video.onloadedmetadata = () => {\n                // calculate the video ratio\n                this.videoRatio = video.videoHeight / video.videoWidth\n                // add event listener on resize to reset the <video> and <canvas> sizes\n                window.addEventListener('resize', this.setResultSize)\n                // set the initial size\n                this.setResultSize()\n                this.isVideoStreamReady = true\n                resolve()\n            }\n            })\n        })\n        // error handling\n        .catch(error => {\n            console.log('failed to initialize webcam stream', error)\n        })\n        }\n    },\n\n    setResultSize () {\n        let clientWidth = document.documentElement.clientWidth\n        this.resultWidth = Math.min(600, clientWidth)\n        this.resultHeight = this.resultWidth * this.videoRatio\n        let video = this.$refs.video\n        video.width = this.resultWidth\n        video.height = this.resultHeight\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nvideo {\n  position: absolute;\n}\n\ncanvas {\n  position: absolute;\n}\n\n#center-container {\n  width: 600px;\n  margin: 0 auto;\n}\n\n#camera-select {\n  width: 300px;\n  margin-bottom: 50px;\n}\n</style>\n"]}]}