{"remainingRequest":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\object_recognition\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\develop\\object_recognition\\src\\App.vue","mtime":1618560612252},{"path":"C:\\develop\\object_recognition\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhcHAgewogIGZvbnQtZmFtaWx5OiBBdmVuaXIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICBjb2xvcjogIzJjM2U1MDsKICBtYXJnaW4tdG9wOiA2MHB4Owp9Cgp2aWRlbyB7CiAgcG9zaXRpb246IGFic29sdXRlOwp9CgpjYW52YXMgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKfQoKI2NlbnRlci1jb250YWluZXIgewogIHdpZHRoOiA2MDBweDsKICBtYXJnaW46IDAgYXV0bzsKfQoKI2NhbWVyYS1zZWxlY3QgewogIHdpZHRoOiAzMDBweDsKICBtYXJnaW4tYm90dG9tOiA1MHB4Owp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n  <div id=\"center-container\">\n    <select id=\"camera-select\" v-model=\"videoDevice\" @change=\"initWebcamStream()\">\n        <option v-for=\"device in devices\" v-bind:key=\"device.deviceId\" v-bind:value=\"device.deviceId\">\n            {{ device.label }}\n        </option>\n    </select>\n    <div id=\"result-frame\">\n      <video ref=\"video\" autoplay></video>\n      <canvas ref=\"canvas\" :width=\"resultWidth\" :height=\"resultHeight\"></canvas>\n    </div>\n    <ul>\n    <li v-for=\"(prediction, index) in predictions\" v-bind:key=\"index\">\n      {{prediction.name}}, {{prediction.score}} %\n    </li>\n    </ul>\n  </div>\n</div>\n</template>\n\n<script>\nimport * as tf from '@tensorflow/tfjs'\n//import * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport * as tmImage from '@teachablemachine/image'//teachable machine\n//import * as tmImage from '@tensorflow-models/speech-commands'//teachable machine\nexport default {\n  name: 'App',\n  components: {\n  },\n  data () {\n    return {\n      videoDevice: '',\n      resultWidth: 0,\n      resultHeight: 0,\n      devices: [],\n      baseModel: 'mobilenet_v2',\n      isModelReady: false,\n      predictions: [],\n      synth: window.speechSynthesis,\n      lastPrediction: ''\n    }\n  },\n  mounted () {\n    tf.setBackend('webgl')\n    this.listVideoDevices()\n    .then(videoDevices => {\n        for (let device of videoDevices) {\n            this.devices.push(device)\n        }\n        this.videoDevice = videoDevices[0].deviceId\n    })\n    .then(() => {\n        return this.initWebcamStream()\n    })\n    .then(() => {\n      return this.loadModel()\n      .then(() => {\n        this.detectObjects()\n      })\n    })\n    \n  },\n  methods: {\n    \n    loadModel () {\n      //return cocoSsd.load(this.baseModel)\n      return tmImage.load('/model.json','/metadata.json')//load teachable machine\n      //return tmImage.load('/model_audio.json','/metadata_audio.json')//load teachable machine\n      .then(model => {\n          this.model = model\n          this.isModelReady = true\n          console.log('model loaded')\n      })\n      .catch((error) => {\n          console.log('failed to load the model', error)\n          throw (error)\n      })\n    },\n\n    detectObjects () {\n      if (!this.isModelReady) return\n\n      if (this.isVideoStreamReady) {\n      //this.model.detect(this.$refs.video)\n      this.model.predict(this.$refs.video)//teachable machine\n          .then(predictions => {\n              //this.renderPredictions(predictions)\n              this.handlePredictions(predictions)//teachable machine\n              requestAnimationFrame(() => {\n              this.detectObjects()\n              })\n          })\n      } else {\n      requestAnimationFrame(() => {\n          this.detectObjects()\n      })\n      }\n    },\n\n    renderPredictions (predictions) {\n      this.predictions.splice(0)\n      const ctx = this.$refs.canvas.getContext('2d')\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      predictions.forEach(prediction => {\n        ctx.beginPath()\n        ctx.rect(...prediction.bbox)\n        ctx.lineWidth = 3\n        ctx.strokeStyle = 'red'\n        ctx.fillStyle = 'red'\n        ctx.stroke()\n        ctx.shadowColor = 'white'\n        ctx.shadowBlur = 10\n        ctx.font = '24px Arial bold'\n        ctx.fillText(\n            `${(prediction.score * 100).toFixed(1)}% ${prediction.class}`,\n            prediction.bbox[0],\n            prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10\n        )\n        this.predictions.push({\n          name: prediction.class,\n          score: (prediction.score*100).toFixed(1)\n        })\n      })\n    },\n\n/*teachable machine*/\n    handlePredictions (predictions) {\n      this.predictions.splice(0)\n      \n      let maxPrediction\n      let maxProb = 0\n      predictions.forEach(prediction => {\n          this.predictions.push({\n            name: prediction.className,\n            score: (prediction.probability * 100).toFixed(1)\n          })\n          if (prediction.probability > maxProb) {\n            maxProb = prediction.probability\n            maxPrediction = prediction\n          }\n      })\n      if (! this.synth.speaking && this.lastPrediction != maxPrediction.className) {\n        this.speak(maxPrediction.className)\n        this.lastPrediction = maxPrediction.className\n      }\n    },\n\n    speak (prediction) {\n      const utterThis = new SpeechSynthesisUtterance(prediction);\n      this.synth.speak(utterThis)\n    },\n\n\n\n    listVideoDevices () {\n      return navigator.mediaDevices.enumerateDevices()\n      .then(devices => {\n          return devices.filter(device => device.kind === 'videoinput')\n      })\n    },\n\n    initWebcamStream () {\n        this.isVideoStreamReady = false\n        // if the browser supports mediaDevices.getUserMedia API\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        return navigator.mediaDevices.getUserMedia({\n            video: { deviceId: this.videoDevice }\n        })\n        .then(stream => {\n            // set <video> source as the webcam input\n            let video = this.$refs.video\n            video.srcObject = stream\n\n            return new Promise((resolve) => {\n            // when video is loaded\n            video.onloadedmetadata = () => {\n                // calculate the video ratio\n                this.videoRatio = video.videoHeight / video.videoWidth\n                // add event listener on resize to reset the <video> and <canvas> sizes\n                window.addEventListener('resize', this.setResultSize)\n                // set the initial size\n                this.setResultSize()\n                this.isVideoStreamReady = true\n                resolve()\n            }\n            })\n        })\n        // error handling\n        .catch(error => {\n            console.log('failed to initialize webcam stream', error)\n        })\n        }\n    },\n\n    setResultSize () {\n        let clientWidth = document.documentElement.clientWidth\n        this.resultWidth = Math.min(600, clientWidth)\n        this.resultHeight = this.resultWidth * this.videoRatio\n        let video = this.$refs.video\n        video.width = this.resultWidth\n        video.height = this.resultHeight\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nvideo {\n  position: absolute;\n}\n\ncanvas {\n  position: absolute;\n}\n\n#center-container {\n  width: 600px;\n  margin: 0 auto;\n}\n\n#camera-select {\n  width: 300px;\n  margin-bottom: 50px;\n}\n</style>\n"]}]}