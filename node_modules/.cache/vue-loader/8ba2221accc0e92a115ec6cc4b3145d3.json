{"remainingRequest":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\object_recognition\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\develop\\object_recognition\\src\\App.vue","mtime":1618316862590},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMnCi8vaW1wb3J0ICogYXMgY29jb1NzZCBmcm9tICdAdGVuc29yZmxvdy1tb2RlbHMvY29jby1zc2QnCmltcG9ydCAqIGFzIHRtSW1hZ2UgZnJvbSAnQHRlYWNoYWJsZW1hY2hpbmUvaW1hZ2UnLy90ZWFjaGFibGUgbWFjaGluZQpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0FwcCcsCiAgY29tcG9uZW50czogewogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICB2aWRlb0RldmljZTogJycsCiAgICAgIHJlc3VsdFdpZHRoOiAwLAogICAgICByZXN1bHRIZWlnaHQ6IDAsCiAgICAgIGRldmljZXM6IFtdLAogICAgICBiYXNlTW9kZWw6ICdtb2JpbGVuZXRfdjInLAogICAgICBpc01vZGVsUmVhZHk6IGZhbHNlLAogICAgICBwcmVkaWN0aW9uczogW10sCiAgICAgIHN5bnRoOiB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLAogICAgICBsYXN0UHJlZGljdGlvbjogJycKICAgIH0KICB9LAogIG1vdW50ZWQgKCkgewogICAgdGYuc2V0QmFja2VuZCgnd2ViZ2wnKQogICAgdGhpcy5saXN0VmlkZW9EZXZpY2VzKCkKICAgIC50aGVuKHZpZGVvRGV2aWNlcyA9PiB7CiAgICAgICAgZm9yIChsZXQgZGV2aWNlIG9mIHZpZGVvRGV2aWNlcykgewogICAgICAgICAgICB0aGlzLmRldmljZXMucHVzaChkZXZpY2UpCiAgICAgICAgfQogICAgICAgIHRoaXMudmlkZW9EZXZpY2UgPSB2aWRlb0RldmljZXNbMF0uZGV2aWNlSWQKICAgIH0pCiAgICAudGhlbigoKSA9PiB7CiAgICAgICAgcmV0dXJuIHRoaXMuaW5pdFdlYmNhbVN0cmVhbSgpCiAgICB9KQogICAgLnRoZW4oKCkgPT4gewogICAgICByZXR1cm4gdGhpcy5sb2FkTW9kZWwoKQogICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgdGhpcy5kZXRlY3RPYmplY3RzKCkKICAgICAgfSkKICAgIH0pCiAgICAKICB9LAogIG1ldGhvZHM6IHsKICAgIAogICAgbG9hZE1vZGVsICgpIHsKICAgICAgLy9yZXR1cm4gY29jb1NzZC5sb2FkKHRoaXMuYmFzZU1vZGVsKQogICAgICByZXR1cm4gdG1JbWFnZS5sb2FkKCcvbW9kZWwuanNvbicsJy9tZXRhZGF0YS5qc29uJykvL2xvYWQgdGVhY2hhYmxlIG1hY2hpbmUKICAgICAgLnRoZW4obW9kZWwgPT4gewogICAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsCiAgICAgICAgICB0aGlzLmlzTW9kZWxSZWFkeSA9IHRydWUKICAgICAgICAgIGNvbnNvbGUubG9nKCdtb2RlbCBsb2FkZWQnKQogICAgICB9KQogICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZmFpbGVkIHRvIGxvYWQgdGhlIG1vZGVsJywgZXJyb3IpCiAgICAgICAgICB0aHJvdyAoZXJyb3IpCiAgICAgIH0pCiAgICB9LAoKICAgIGRldGVjdE9iamVjdHMgKCkgewogICAgICBpZiAoIXRoaXMuaXNNb2RlbFJlYWR5KSByZXR1cm4KCiAgICAgIGlmICh0aGlzLmlzVmlkZW9TdHJlYW1SZWFkeSkgewogICAgICAvL3RoaXMubW9kZWwuZGV0ZWN0KHRoaXMuJHJlZnMudmlkZW8pCiAgICAgIHRoaXMubW9kZWwucHJlZGljdCh0aGlzLiRyZWZzLnZpZGVvKS8vdGVhY2hhYmxlIG1hY2hpbmUKICAgICAgICAgIC50aGVuKHByZWRpY3Rpb25zID0+IHsKICAgICAgICAgICAgICAvL3RoaXMucmVuZGVyUHJlZGljdGlvbnMocHJlZGljdGlvbnMpCiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVQcmVkaWN0aW9ucyhwcmVkaWN0aW9ucykvL3RlYWNoYWJsZSBtYWNoaW5lCiAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHsKICAgICAgICAgICAgICB0aGlzLmRldGVjdE9iamVjdHMoKQogICAgICAgICAgICAgIH0pCiAgICAgICAgICB9KQogICAgICB9IGVsc2UgewogICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgdGhpcy5kZXRlY3RPYmplY3RzKCkKICAgICAgfSkKICAgICAgfQogICAgfSwKCiAgICByZW5kZXJQcmVkaWN0aW9ucyAocHJlZGljdGlvbnMpIHsKICAgICAgdGhpcy5wcmVkaWN0aW9ucy5zcGxpY2UoMCkKICAgICAgY29uc3QgY3R4ID0gdGhpcy4kcmVmcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKQogICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KQogICAgICBwcmVkaWN0aW9ucy5mb3JFYWNoKHByZWRpY3Rpb24gPT4gewogICAgICAgIGN0eC5iZWdpblBhdGgoKQogICAgICAgIGN0eC5yZWN0KC4uLnByZWRpY3Rpb24uYmJveCkKICAgICAgICBjdHgubGluZVdpZHRoID0gMwogICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZWQnCiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZWQnCiAgICAgICAgY3R4LnN0cm9rZSgpCiAgICAgICAgY3R4LnNoYWRvd0NvbG9yID0gJ3doaXRlJwogICAgICAgIGN0eC5zaGFkb3dCbHVyID0gMTAKICAgICAgICBjdHguZm9udCA9ICcyNHB4IEFyaWFsIGJvbGQnCiAgICAgICAgY3R4LmZpbGxUZXh0KAogICAgICAgICAgICBgJHsocHJlZGljdGlvbi5zY29yZSAqIDEwMCkudG9GaXhlZCgxKX0lICR7cHJlZGljdGlvbi5jbGFzc31gLAogICAgICAgICAgICBwcmVkaWN0aW9uLmJib3hbMF0sCiAgICAgICAgICAgIHByZWRpY3Rpb24uYmJveFsxXSA+IDEwID8gcHJlZGljdGlvbi5iYm94WzFdIC0gNSA6IDEwCiAgICAgICAgKQogICAgICAgIHRoaXMucHJlZGljdGlvbnMucHVzaCh7CiAgICAgICAgICBuYW1lOiBwcmVkaWN0aW9uLmNsYXNzLAogICAgICAgICAgc2NvcmU6IChwcmVkaWN0aW9uLnNjb3JlKjEwMCkudG9GaXhlZCgxKQogICAgICAgIH0pCiAgICAgIH0pCiAgICB9LAoKLyp0ZWFjaGFibGUgbWFjaGluZSovCiAgICBoYW5kbGVQcmVkaWN0aW9ucyAocHJlZGljdGlvbnMpIHsKICAgICAgdGhpcy5wcmVkaWN0aW9ucy5zcGxpY2UoMCkKICAgICAgCiAgICAgIGxldCBtYXhQcmVkaWN0aW9uCiAgICAgIGxldCBtYXhQcm9iID0gMAogICAgICBwcmVkaWN0aW9ucy5mb3JFYWNoKHByZWRpY3Rpb24gPT4gewogICAgICAgICAgdGhpcy5wcmVkaWN0aW9ucy5wdXNoKHsKICAgICAgICAgICAgbmFtZTogcHJlZGljdGlvbi5jbGFzc05hbWUsCiAgICAgICAgICAgIHNjb3JlOiAocHJlZGljdGlvbi5wcm9iYWJpbGl0eSAqIDEwMCkudG9GaXhlZCgxKQogICAgICAgICAgfSkKICAgICAgICAgIGlmIChwcmVkaWN0aW9uLnByb2JhYmlsaXR5ID4gbWF4UHJvYikgewogICAgICAgICAgICBtYXhQcm9iID0gcHJlZGljdGlvbi5wcm9iYWJpbGl0eQogICAgICAgICAgICBtYXhQcmVkaWN0aW9uID0gcHJlZGljdGlvbgogICAgICAgICAgfQogICAgICB9KQogICAgICBpZiAoISB0aGlzLnN5bnRoLnNwZWFraW5nICYmIHRoaXMubGFzdFByZWRpY3Rpb24gIT0gbWF4UHJlZGljdGlvbi5jbGFzc05hbWUpIHsKICAgICAgICB0aGlzLnNwZWFrKG1heFByZWRpY3Rpb24uY2xhc3NOYW1lKQogICAgICAgIHRoaXMubGFzdFByZWRpY3Rpb24gPSBtYXhQcmVkaWN0aW9uLmNsYXNzTmFtZQogICAgICB9CiAgICB9LAoKICAgIHNwZWFrIChwcmVkaWN0aW9uKSB7CiAgICAgIGNvbnN0IHV0dGVyVGhpcyA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UocHJlZGljdGlvbik7CiAgICAgIHRoaXMuc3ludGguc3BlYWsodXR0ZXJUaGlzKQogICAgfSwKCgoKICAgIGxpc3RWaWRlb0RldmljZXMgKCkgewogICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkKICAgICAgLnRoZW4oZGV2aWNlcyA9PiB7CiAgICAgICAgICByZXR1cm4gZGV2aWNlcy5maWx0ZXIoZGV2aWNlID0+IGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpCiAgICAgIH0pCiAgICB9LAoKICAgIGluaXRXZWJjYW1TdHJlYW0gKCkgewogICAgICAgIHRoaXMuaXNWaWRlb1N0cmVhbVJlYWR5ID0gZmFsc2UKICAgICAgICAvLyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBtZWRpYURldmljZXMuZ2V0VXNlck1lZGlhIEFQSQogICAgICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7CiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsKICAgICAgICAgICAgdmlkZW86IHsgZGV2aWNlSWQ6IHRoaXMudmlkZW9EZXZpY2UgfQogICAgICAgIH0pCiAgICAgICAgLnRoZW4oc3RyZWFtID0+IHsKICAgICAgICAgICAgLy8gc2V0IDx2aWRlbz4gc291cmNlIGFzIHRoZSB3ZWJjYW0gaW5wdXQKICAgICAgICAgICAgbGV0IHZpZGVvID0gdGhpcy4kcmVmcy52aWRlbwogICAgICAgICAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW0KCiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgICAgICAvLyB3aGVuIHZpZGVvIGlzIGxvYWRlZAogICAgICAgICAgICB2aWRlby5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4gewogICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSB2aWRlbyByYXRpbwogICAgICAgICAgICAgICAgdGhpcy52aWRlb1JhdGlvID0gdmlkZW8udmlkZW9IZWlnaHQgLyB2aWRlby52aWRlb1dpZHRoCiAgICAgICAgICAgICAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXIgb24gcmVzaXplIHRvIHJlc2V0IHRoZSA8dmlkZW8+IGFuZCA8Y2FudmFzPiBzaXplcwogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2V0UmVzdWx0U2l6ZSkKICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBzaXplCiAgICAgICAgICAgICAgICB0aGlzLnNldFJlc3VsdFNpemUoKQogICAgICAgICAgICAgICAgdGhpcy5pc1ZpZGVvU3RyZWFtUmVhZHkgPSB0cnVlCiAgICAgICAgICAgICAgICByZXNvbHZlKCkKICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgICAgLy8gZXJyb3IgaGFuZGxpbmcKICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZygnZmFpbGVkIHRvIGluaXRpYWxpemUgd2ViY2FtIHN0cmVhbScsIGVycm9yKQogICAgICAgIH0pCiAgICAgICAgfQogICAgfSwKCiAgICBzZXRSZXN1bHRTaXplICgpIHsKICAgICAgICBsZXQgY2xpZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgKICAgICAgICB0aGlzLnJlc3VsdFdpZHRoID0gTWF0aC5taW4oNjAwLCBjbGllbnRXaWR0aCkKICAgICAgICB0aGlzLnJlc3VsdEhlaWdodCA9IHRoaXMucmVzdWx0V2lkdGggKiB0aGlzLnZpZGVvUmF0aW8KICAgICAgICBsZXQgdmlkZW8gPSB0aGlzLiRyZWZzLnZpZGVvCiAgICAgICAgdmlkZW8ud2lkdGggPSB0aGlzLnJlc3VsdFdpZHRoCiAgICAgICAgdmlkZW8uaGVpZ2h0ID0gdGhpcy5yZXN1bHRIZWlnaHQKICAgIH0KICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n  <div id=\"center-container\">\n    <select id=\"camera-select\" v-model=\"videoDevice\" @change=\"initWebcamStream()\">\n        <option v-for=\"device in devices\" v-bind:key=\"device.deviceId\" v-bind:value=\"device.deviceId\">\n            {{ device.label }}\n        </option>\n    </select>\n    <div id=\"result-frame\">\n      <video ref=\"video\" autoplay></video>\n      <canvas ref=\"canvas\" :width=\"resultWidth\" :height=\"resultHeight\"></canvas>\n    </div>\n    <ul>\n    <li v-for=\"(prediction, index) in predictions\" v-bind:key=\"index\">\n      {{prediction.name}}, {{prediction.score}} %\n    </li>\n    </ul>\n  </div>\n</div>\n</template>\n\n<script>\nimport * as tf from '@tensorflow/tfjs'\n//import * as cocoSsd from '@tensorflow-models/coco-ssd'\nimport * as tmImage from '@teachablemachine/image'//teachable machine\nexport default {\n  name: 'App',\n  components: {\n  },\n  data () {\n    return {\n      videoDevice: '',\n      resultWidth: 0,\n      resultHeight: 0,\n      devices: [],\n      baseModel: 'mobilenet_v2',\n      isModelReady: false,\n      predictions: [],\n      synth: window.speechSynthesis,\n      lastPrediction: ''\n    }\n  },\n  mounted () {\n    tf.setBackend('webgl')\n    this.listVideoDevices()\n    .then(videoDevices => {\n        for (let device of videoDevices) {\n            this.devices.push(device)\n        }\n        this.videoDevice = videoDevices[0].deviceId\n    })\n    .then(() => {\n        return this.initWebcamStream()\n    })\n    .then(() => {\n      return this.loadModel()\n      .then(() => {\n        this.detectObjects()\n      })\n    })\n    \n  },\n  methods: {\n    \n    loadModel () {\n      //return cocoSsd.load(this.baseModel)\n      return tmImage.load('/model.json','/metadata.json')//load teachable machine\n      .then(model => {\n          this.model = model\n          this.isModelReady = true\n          console.log('model loaded')\n      })\n      .catch((error) => {\n          console.log('failed to load the model', error)\n          throw (error)\n      })\n    },\n\n    detectObjects () {\n      if (!this.isModelReady) return\n\n      if (this.isVideoStreamReady) {\n      //this.model.detect(this.$refs.video)\n      this.model.predict(this.$refs.video)//teachable machine\n          .then(predictions => {\n              //this.renderPredictions(predictions)\n              this.handlePredictions(predictions)//teachable machine\n              requestAnimationFrame(() => {\n              this.detectObjects()\n              })\n          })\n      } else {\n      requestAnimationFrame(() => {\n          this.detectObjects()\n      })\n      }\n    },\n\n    renderPredictions (predictions) {\n      this.predictions.splice(0)\n      const ctx = this.$refs.canvas.getContext('2d')\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      predictions.forEach(prediction => {\n        ctx.beginPath()\n        ctx.rect(...prediction.bbox)\n        ctx.lineWidth = 3\n        ctx.strokeStyle = 'red'\n        ctx.fillStyle = 'red'\n        ctx.stroke()\n        ctx.shadowColor = 'white'\n        ctx.shadowBlur = 10\n        ctx.font = '24px Arial bold'\n        ctx.fillText(\n            `${(prediction.score * 100).toFixed(1)}% ${prediction.class}`,\n            prediction.bbox[0],\n            prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10\n        )\n        this.predictions.push({\n          name: prediction.class,\n          score: (prediction.score*100).toFixed(1)\n        })\n      })\n    },\n\n/*teachable machine*/\n    handlePredictions (predictions) {\n      this.predictions.splice(0)\n      \n      let maxPrediction\n      let maxProb = 0\n      predictions.forEach(prediction => {\n          this.predictions.push({\n            name: prediction.className,\n            score: (prediction.probability * 100).toFixed(1)\n          })\n          if (prediction.probability > maxProb) {\n            maxProb = prediction.probability\n            maxPrediction = prediction\n          }\n      })\n      if (! this.synth.speaking && this.lastPrediction != maxPrediction.className) {\n        this.speak(maxPrediction.className)\n        this.lastPrediction = maxPrediction.className\n      }\n    },\n\n    speak (prediction) {\n      const utterThis = new SpeechSynthesisUtterance(prediction);\n      this.synth.speak(utterThis)\n    },\n\n\n\n    listVideoDevices () {\n      return navigator.mediaDevices.enumerateDevices()\n      .then(devices => {\n          return devices.filter(device => device.kind === 'videoinput')\n      })\n    },\n\n    initWebcamStream () {\n        this.isVideoStreamReady = false\n        // if the browser supports mediaDevices.getUserMedia API\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        return navigator.mediaDevices.getUserMedia({\n            video: { deviceId: this.videoDevice }\n        })\n        .then(stream => {\n            // set <video> source as the webcam input\n            let video = this.$refs.video\n            video.srcObject = stream\n\n            return new Promise((resolve) => {\n            // when video is loaded\n            video.onloadedmetadata = () => {\n                // calculate the video ratio\n                this.videoRatio = video.videoHeight / video.videoWidth\n                // add event listener on resize to reset the <video> and <canvas> sizes\n                window.addEventListener('resize', this.setResultSize)\n                // set the initial size\n                this.setResultSize()\n                this.isVideoStreamReady = true\n                resolve()\n            }\n            })\n        })\n        // error handling\n        .catch(error => {\n            console.log('failed to initialize webcam stream', error)\n        })\n        }\n    },\n\n    setResultSize () {\n        let clientWidth = document.documentElement.clientWidth\n        this.resultWidth = Math.min(600, clientWidth)\n        this.resultHeight = this.resultWidth * this.videoRatio\n        let video = this.$refs.video\n        video.width = this.resultWidth\n        video.height = this.resultHeight\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\nvideo {\n  position: absolute;\n}\n\ncanvas {\n  position: absolute;\n}\n\n#center-container {\n  width: 600px;\n  margin: 0 auto;\n}\n\n#camera-select {\n  width: 300px;\n  margin-bottom: 50px;\n}\n</style>\n"]}]}