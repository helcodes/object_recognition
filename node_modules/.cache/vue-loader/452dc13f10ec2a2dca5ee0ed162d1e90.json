{"remainingRequest":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\develop\\object_recognition\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\develop\\object_recognition\\src\\App.vue","mtime":1619166515294},{"path":"C:\\develop\\object_recognition\\node_modules\\css-loader\\dist\\cjs.js","mtime":1619166486846},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1619166513704},{"path":"C:\\develop\\object_recognition\\node_modules\\postcss-loader\\src\\index.js","mtime":1619166502254},{"path":"C:\\develop\\object_recognition\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1619166478506},{"path":"C:\\develop\\object_recognition\\node_modules\\vue-loader\\lib\\index.js","mtime":1619166513702}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojYXBwIHsNCiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsNCiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7DQogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7DQogIGNvbG9yOiAjMmMzZTUwOw0KICBtYXJnaW4tdG9wOiA2MHB4Ow0KfQ0KDQp2aWRlbyB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCn0NCg0KY2FudmFzIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KfQ0KDQojY2VudGVyLWNvbnRhaW5lciB7DQogIHdpZHRoOiA2MDBweDsNCiAgbWFyZ2luOiAwIGF1dG87DQp9DQoNCiNjYW1lcmEtc2VsZWN0IHsNCiAgd2lkdGg6IDMwMHB4Ow0KICBtYXJnaW4tYm90dG9tOiA1MHB4Ow0KfQ0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n  <div id=\"center-container\">\r\n    <select id=\"camera-select\" v-model=\"videoDevice\" @change=\"initWebcamStream()\">\r\n        <option v-for=\"device in devices\" v-bind:key=\"device.deviceId\" v-bind:value=\"device.deviceId\">\r\n            {{ device.label }}\r\n        </option>\r\n    </select>\r\n    <div id=\"result-frame\">\r\n      <video ref=\"video\" autoplay></video>\r\n      <canvas ref=\"canvas\" :width=\"resultWidth\" :height=\"resultHeight\"></canvas>\r\n    </div>\r\n    <ul>\r\n    <li v-for=\"(prediction, index) in predictions\" v-bind:key=\"index\">\r\n      {{prediction.name}}, {{prediction.score}} %\r\n    </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport * as tf from '@tensorflow/tfjs'\r\n//import * as cocoSsd from '@tensorflow-models/coco-ssd'\r\nimport * as tmImage from '@teachablemachine/image'//teachable machine\r\n//import * as tmImage from '@tensorflow-models/speech-commands'//teachable machine\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n  },\r\n  data () {\r\n    return {\r\n      videoDevice: '',\r\n      resultWidth: 0,\r\n      resultHeight: 0,\r\n      devices: [],\r\n      baseModel: 'mobilenet_v2',\r\n      isModelReady: false,\r\n      predictions: [],\r\n      synth: window.speechSynthesis,\r\n      lastPrediction: ''\r\n    }\r\n  },\r\n  mounted () {\r\n    tf.setBackend('webgl')\r\n    this.listVideoDevices()\r\n    .then(videoDevices => {\r\n        for (let device of videoDevices) {\r\n            this.devices.push(device)\r\n        }\r\n        this.videoDevice = videoDevices[0].deviceId\r\n    })\r\n    .then(() => {\r\n        return this.initWebcamStream()\r\n    })\r\n    .then(() => {\r\n      return this.loadModel()\r\n      .then(() => {\r\n        this.detectObjects()\r\n      })\r\n    })\r\n    \r\n  },\r\n  methods: {\r\n    \r\n    loadModel () {\r\n      //return cocoSsd.load(this.baseModel)\r\n      return tmImage.load('/model.json','/metadata.json')//load teachable machine\r\n      //return tmImage.load('/model_audio.json','/metadata_audio.json')//load teachable machine\r\n      .then(model => {\r\n          this.model = model\r\n          this.isModelReady = true\r\n          console.log('model loaded')\r\n      })\r\n      .catch((error) => {\r\n          console.log('failed to load the model', error)\r\n          throw (error)\r\n      })\r\n    },\r\n\r\n    detectObjects () {\r\n      if (!this.isModelReady) return\r\n\r\n      if (this.isVideoStreamReady) {\r\n      //this.model.detect(this.$refs.video)\r\n      this.model.predict(this.$refs.video)//teachable machine\r\n          .then(predictions => {\r\n              //this.renderPredictions(predictions)\r\n              this.handlePredictions(predictions)//teachable machine\r\n              requestAnimationFrame(() => {\r\n              this.detectObjects()\r\n              })\r\n          })\r\n      } else {\r\n      requestAnimationFrame(() => {\r\n          this.detectObjects()\r\n      })\r\n      }\r\n    },\r\n\r\n    renderPredictions (predictions) {\r\n      this.predictions.splice(0)\r\n      const ctx = this.$refs.canvas.getContext('2d')\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n      predictions.forEach(prediction => {\r\n        ctx.beginPath()\r\n        ctx.rect(...prediction.bbox)\r\n        ctx.lineWidth = 3\r\n        ctx.strokeStyle = 'red'\r\n        ctx.fillStyle = 'red'\r\n        ctx.stroke()\r\n        ctx.shadowColor = 'white'\r\n        ctx.shadowBlur = 10\r\n        ctx.font = '24px Arial bold'\r\n        ctx.fillText(\r\n            `${(prediction.score * 100).toFixed(1)}% ${prediction.class}`,\r\n            prediction.bbox[0],\r\n            prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10\r\n        )\r\n        this.predictions.push({\r\n          name: prediction.class,\r\n          score: (prediction.score*100).toFixed(1)\r\n        })\r\n      })\r\n    },\r\n\r\n/*teachable machine*/\r\n    handlePredictions (predictions) {\r\n      this.predictions.splice(0)\r\n      \r\n      let maxPrediction\r\n      let maxProb = 0\r\n      predictions.forEach(prediction => {\r\n          this.predictions.push({\r\n            name: prediction.className,\r\n            score: (prediction.probability * 100).toFixed(1)\r\n          })\r\n          if (prediction.probability > maxProb) {\r\n            maxProb = prediction.probability\r\n            maxPrediction = prediction\r\n          }\r\n      })\r\n      if (! this.synth.speaking && this.lastPrediction != maxPrediction.className) {\r\n        this.speak(maxPrediction.className)\r\n        this.lastPrediction = maxPrediction.className\r\n      }\r\n    },\r\n\r\n    speak (prediction) {\r\n      const utterThis = new SpeechSynthesisUtterance(prediction);\r\n      this.synth.speak(utterThis)\r\n    },\r\n\r\n\r\n\r\n    listVideoDevices () {\r\n      return navigator.mediaDevices.enumerateDevices()\r\n      .then(devices => {\r\n          return devices.filter(device => device.kind === 'videoinput')\r\n      })\r\n    },\r\n\r\n    initWebcamStream () {\r\n        this.isVideoStreamReady = false\r\n        // if the browser supports mediaDevices.getUserMedia API\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: { deviceId: this.videoDevice }\r\n        })\r\n        .then(stream => {\r\n            // set <video> source as the webcam input\r\n            let video = this.$refs.video\r\n            video.srcObject = stream\r\n\r\n            return new Promise((resolve) => {\r\n            // when video is loaded\r\n            video.onloadedmetadata = () => {\r\n                // calculate the video ratio\r\n                this.videoRatio = video.videoHeight / video.videoWidth\r\n                // add event listener on resize to reset the <video> and <canvas> sizes\r\n                window.addEventListener('resize', this.setResultSize)\r\n                // set the initial size\r\n                this.setResultSize()\r\n                this.isVideoStreamReady = true\r\n                resolve()\r\n            }\r\n            })\r\n        })\r\n        // error handling\r\n        .catch(error => {\r\n            console.log('failed to initialize webcam stream', error)\r\n        })\r\n        }\r\n    },\r\n\r\n    setResultSize () {\r\n        let clientWidth = document.documentElement.clientWidth\r\n        this.resultWidth = Math.min(600, clientWidth)\r\n        this.resultHeight = this.resultWidth * this.videoRatio\r\n        let video = this.$refs.video\r\n        video.width = this.resultWidth\r\n        video.height = this.resultHeight\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  color: #2c3e50;\r\n  margin-top: 60px;\r\n}\r\n\r\nvideo {\r\n  position: absolute;\r\n}\r\n\r\ncanvas {\r\n  position: absolute;\r\n}\r\n\r\n#center-container {\r\n  width: 600px;\r\n  margin: 0 auto;\r\n}\r\n\r\n#camera-select {\r\n  width: 300px;\r\n  margin-bottom: 50px;\r\n}\r\n</style>\r\n"]}]}